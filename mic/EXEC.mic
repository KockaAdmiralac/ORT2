step00 => br (if notEXEC then step00)
step01 => br (case(HALT, RTS, RTI, ROTR, ROTRC, PUSH, POP, BLEQ, BGREU, BNNG, BGRT, JLEQ, JMP, JSR, LD, ADD, OR, ST, INC, STRFIND)) then (HALT, step02), (RTS, step03), (RTI, step09), (ROTR, step18), (ROTRC, step19), (PUSH, step1A), (POP, step20), (BLEQ, step28), (BGREU, step2A), (BNNG, step2C), (BGRT, step2E), (JLEQ, step30), (JMP, step32), (JSR, step33), (LD, step3A), (ADD, step3C), (OR, step3E), (ST, step40), (INC, step47), (STRFIND, step4E)
! HALT !
step02 => clPSWSTART, br step53
! RTS !
step03 => incSP
step04 => ldMAR, mxMAR0, mxMAR2, incSP
step05 => rdMEM, ldMDR, br (if notFCBUS then step05)
step06 => ldMAR, mxMAR0, mxMAR2, ldPC, mxPC0
step07 => rdMEM, ldMDR, br (if notFCBUS then step07)
step08 => ldPC, mxPC1, br step53
! RTI !
step09 => incSP
step0A => ldMAR, mxMAR0, mxMAR2, incSP
step0B => rdMEM, ldMDR, br (if notFCBUS then step0B)
step0C => ldMAR, mxMAR0, mxMAR2, ldB, mxB0, incSP
step0D => rdMEM, ldMDR, br (if notFCBUS then step0D)
step0E => ldB, mxB1, ldMAR, mxMAR0, mxMAR2, incSP
step0F => ldA
step10 => rdMEM, ldMDR, br (if notFCBUS then step10)
step11 => ldPSWMDR, ldPSWI, ldMAR, mxMAR0, mxMAR2, incSP
step12 => rdMEM, ldMDR, br (if notFCBUS then step12)
step13 => ldPSWMDR, ldPSWC, ldPSWV, ldPSWN, ldPSWZ, ldMAR, mxMAR0, mxMAR2, incSP
step14 => rdMEM, ldMDR, br (if notFCBUS then step14)
step15 => ldMAR, mxMAR0, mxMAR2, ldPC, mxPC0
step16 => rdMEM, ldMDR, br (if notFCBUS then step16)
step17 => ldPC, mxPC1, br step53
! ROTR !
step18 => ldA, mxA0, mxA1, ldPSWN, ldPSWZ, ldPSWC, mxC1, br step53
! ROTRC !
step19 => ldA, mxA2, ldPSWN, ldPSWZ, ldPSWC, mxC1, br step53
! PUSH !
step1A => ldMAR, mxMAR0, mxMAR2, decSP
step1B => ldMDR, mxMDR1, mxMDR2
step1C => wrMEM, br (if notFCBUS then step1C)
step1D => ldMAR, mxMAR0, mxMAR2, decSP, ldMDR, mxMDR0, mxMDR2
step1E => wrMEM, br (if notFCBUS then step1E)
step1F => br step53
! POP !
step20 => incSP
step21 => ldMAR, mxMAR0, mxMAR2, incSP
step22 => rdMEM, ldMDR, br (if notFCBUS then step22)
step23 => ldMAR, mxMAR0, mxMAR2, ldB, mxB0
step24 => rdMEM, ldMDR, br (if notFCBUS then step24)
step25 => ldB, mxB1
step26 => ldA
step27 => ldPSWN, ldPSWZ, br step53
! BLEQ !
step28 => br (if notLEQ then step53)
step29 => ldPC, mxPC0, mxPC1, br step53
! BGREU !
step2A => br (if notGREU then step53)
step2B => ldPC, mxPC0, mxPC1, br step53
! BNNG !
step2C => br (if notNNG then step53)
step2D => ldPC, mxPC0, mxPC1, br step53
! BGRT !
step2E => br (if notGRT then step53)
step2F => ldPC, mxPC0, mxPC1, br step53
! JLEQ !
step30 => br (if notLEQ then step53)
step31 => ldPC, mxPC2, br step53
! JMP !
step32 => ldPC, mxPC2, br step53
! JSR !
step33 => ldMAR, mxMAR0, mxMAR2, decSP
step34 => ldMDR, mxMDR1
step35 => wrMEM, br (if notFCBUS then step35)
step36 => ldMAR, mxMAR0, mxMAR2, decSP
step37 => ldMDR, mxMDR0
step38 => wrMEM, br (if notFCBUS then step38)
step39 => ldPC, mxPC2, br step53
! LD !
step3A => ldA
step3B => ldPSWN, ldPSWZ, br step53
! ADD !
step3C => ldA, mxA0, ldPSWV, ldPSWC, mxC0
step3D => ldPSWN, ldPSWZ, br step53
! OR !
step3E => ldA, mxA1
step3F => ldPSWN, ldPSWZ, br step53
! ST !
step40 => br (if notregdir then step42)
step41 => wrGPR, mxGPRIN1, br step53
step42 => ldMDR, mxMDR0, mxMDR2
step43 => wrMEM, br (if notFCBUS then step43)
step44 => ldMDR, mxMDR1, mxMDR2, incMAR
step45 => wrMEM, br (if notFCBUS then step45)
step46 => br step53
! INC !
step47 => br (if notregdir then step49)
step48 => incGPR, br step53
step49 => ldMDR, mxMDR0, mxMDR1, mxMDR2, decMAR
step4A => wrMEM, br (if notFCBUS then step4A)
step4B => ldMDR, mxMDR3, incMAR
step4C => wrMEM, br (if notFCBUS then step4C)
step4D => br step53
! STRFIND !
step4E => ldAUX, ldA
step4F => ldMAR, mxMAR0, mxMAR1, mxMAR2
step50 => rdMEM, ldMDR, br (if notFCBUS then step50)
step51 => incA, br (if notbrchar then step4F)
step52 => ldA, mxA0, mxA2, ldPSWZ
! Prelazak u fazu opsluÅ¾ivanja prekida !
step53 => stINTR, clEXEC, br step00
